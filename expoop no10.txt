Aim: Implement Factory design pattern for the given context. Consider Car building process,
which requires many steps from allocating accessories to final makeup. These steps should be
written as methods and should be called while creating an instance of a specific car type.
Hatchback, Sedan, SUV could be the subclasses of Car class. Car class and its subclasses,
CarFactory and Test Factory Pattern should be implemented.
Objectives: To implement the concept of OOP in Java.
Theory:
Factory pattern:
Factory pattern is one of the most used design patterns in Java. This type of design pattern
comes under creational pattern as this pattern provides one of the best ways to create an object.
In Factory pattern, we create object without exposing the creation logic to the client and refer
to newly created object using a common interface.
Program:
//File Car.java
public interface Car
{
public void buildCar();
}
//File Hatchback.java
public class Hatchback implements Car
{
public void buildCar()
{
System.out.println("Hatchback car build process complete");
}
}
//File Sedan.java
public class Sedan implements Car
{
public void buildCar()
{
System.out.println("Sedan car build process complete");
}
}
//File SUV.java
public class SUV implements Car
{
public void buildCar()
{
System.out.println("SUV build process complete");
}
}
//File CarAssembler.java
public class CarAssembler
{
public void buildCar(Car carType)
{
carType.buildCar();
}
}

//File CarFactory.java
public class CarFactory
{
public Car getCar(String carType)
{
Car car=null;
CarAssembler assembler = new CarAssembler();
if(carType.compareToIgnoreCase("Hatchback")==0)
{
car = new Hatchback();
assembler.buildCar(car);
}
if(carType.compareToIgnoreCase("Sedan")==0)
{
car = new Sedan();
assembler.buildCar(car);
}
if(carType.compareToIgnoreCase("SUV")==0)
{
car = new SUV();
assembler.buildCar(car);
}
return car;
}
}
//File TestFactory.java
public class TestFactory
{
public static void main(String []args)
{
CarFactory factory =new CarFactory();
SUV suv = (SUV) factory.getCar("SUV");
Sedan se = (Sedan) factory.getCar("Sedan");
Hatchback hb = (Hatchback) factory.getCar("Hatchback");
}
}